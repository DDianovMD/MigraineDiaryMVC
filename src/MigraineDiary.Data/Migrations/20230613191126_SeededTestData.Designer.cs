// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MigraineDiary.Data;

#nullable disable

namespace MigraineDiary.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230613191126_SeededTestData")]
    partial class SeededTestData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUserHeadache", b =>
                {
                    b.Property<string>("SharedWithId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SharedWithMeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SharedWithId", "SharedWithMeId");

                    b.HasIndex("SharedWithMeId");

                    b.ToTable("ApplicationUserHeadache");
                });

            modelBuilder.Entity("ApplicationUserHIT6Scale", b =>
                {
                    b.Property<string>("SharedHIT6ScalesWithMeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SharedWithId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SharedHIT6ScalesWithMeId", "SharedWithId");

                    b.HasIndex("SharedWithId");

                    b.ToTable("ApplicationUserHIT6Scale");
                });

            modelBuilder.Entity("ApplicationUserZungScaleForAnxiety", b =>
                {
                    b.Property<string>("SharedWithId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SharedZungScalesForAnxietyWithMeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SharedWithId", "SharedZungScalesForAnxietyWithMeId");

                    b.HasIndex("SharedZungScalesForAnxietyWithMeId");

                    b.ToTable("ApplicationUserZungScaleForAnxiety");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2d75eec2-411b-43d0-acb7-5ae4bf74555f",
                            ConcurrencyStamp = "dc4da88c-abcb-4050-b677-9e9327e7f1a6",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ef68c501-9ba3-401c-b9df-23685ffafe53",
                            ConcurrencyStamp = "7b553f94-92e3-4694-9c7f-b1ae1a731e0c",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "dcf214a0-ab0e-4ce9-8cf3-74bb6dc6acf9",
                            ConcurrencyStamp = "37867dd9-dfa8-42a3-92fb-f503a0e27c27",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ff3d52a7-7288-42aa-9955-6c4c4ad4caed",
                            RoleId = "2d75eec2-411b-43d0-acb7-5ae4bf74555f"
                        },
                        new
                        {
                            UserId = "6372cb29-7b06-4510-845a-375fe51edc06",
                            RoleId = "ef68c501-9ba3-401c-b9df-23685ffafe53"
                        },
                        new
                        {
                            UserId = "88f40769-cbdb-4c19-80b3-e43ccf48e22d",
                            RoleId = "dcf214a0-ab0e-4ce9-8cf3-74bb6dc6acf9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ff3d52a7-7288-42aa-9955-6c4c4ad4caed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4691a13e-c0e4-4ef6-9671-622607d30a38",
                            Email = "admin@migrainediary.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Adminov",
                            LockoutEnabled = true,
                            MiddleName = "Adminov",
                            NormalizedEmail = "ADMIN@MIGRAINEDIARY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMssP0Ob1FXF2v0qN8Mt+Qd3NMXQBZLJ1wG1j2V2jfJ8lKYB7m2HPCEZq4dkwjLvcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e02e076-dae8-4cbb-9b05-4641cd36afdf",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "6372cb29-7b06-4510-845a-375fe51edc06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2979b8e6-4aa7-4f4d-9fe7-7d92d6d01b6a",
                            Email = "testuser@migrainediary.com",
                            EmailConfirmed = true,
                            FirstName = "Pesho",
                            IsDeleted = false,
                            LastName = "Petrov",
                            LockoutEnabled = true,
                            MiddleName = "Petrov",
                            NormalizedEmail = "TESTUSER@MIGRAINEDIARY.COM",
                            NormalizedUserName = "TESTUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEHl5pMIfa040UFZmQoRpdYMY4ea2vUz0D0RKEknFpASuMJRGkEvig5lPrpLuXbenqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68d3f1b3-64f0-49bb-9c5a-61ebec469e5c",
                            TwoFactorEnabled = false,
                            UserName = "TestUser"
                        },
                        new
                        {
                            Id = "88f40769-cbdb-4c19-80b3-e43ccf48e22d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2e3d42e-5d6c-4164-8d3d-beb539735b68",
                            Email = "testdoctor@migrainediary.com",
                            EmailConfirmed = true,
                            FirstName = "Mincho",
                            IsDeleted = false,
                            LastName = "Petrov",
                            LockoutEnabled = true,
                            MiddleName = "Testov",
                            NormalizedEmail = "TESTDOCTOR@MIGRAINEDIARY.COM",
                            NormalizedUserName = "TESTDOCTOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEAaC7RINmnWQnKirG6UjQ7XGE62t4SLUywbr224NDJXGlBUIjWpI1w1yXEj5AuQoUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a862795f-0f93-46ec-882b-bdcf52b058ef",
                            TwoFactorEnabled = false,
                            UserName = "TestDoctor"
                        });
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = "dummy-data-article-1",
                            Author = "Megan Brooks",
                            Content = "<p style=\"line-height: 1.15;\">Американската Агенция по храните и лекарствата (FDA) одобри <strong>zavegepant</strong> (<em>Zavzpret <sup>&reg;</sup>, Pfizer</em>) - първият калцитонин ген-свързан пептид (<strong><em>CGRP</em></strong>) рецепторен антагонист под формата на назален спрей за лечение при възрастни на остър пристъп от мигрена с или без аура.</p><p style=\"line-height: 1.15;\">Лекарството е одобрено на базата на резултатите от две рандомизирани, двойно-заслепени, плацебо-контролирании изследвания.</p><p style=\"line-height: 1.15;\">В трета фаза на <a href=\"https://www.thelancet.com/journals/laneur/article/PIIS1474-4422%2822%2900517-8/fulltext\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"fr-strong\">клинично изследване</a>, публикувано през февруари 2023г. в <em>The Lancet Neurology</em>, интраназалното приложение на <em>zavegepant</em> показва статистически значими резултати спрямо плацебо по отношение на облекчаването на болката и облекчаването на най-тревожещия пациентите симптом на 2-рия час след приложението.</p><p style=\"line-height: 1.15;\">Допълнително <em>zavegepant</em> води до облекчение на болката в рамките на 15 минути след приложение, като ефектът се наблюдава до 48 часа след приложението при много от пациентите.</p><blockquote><p style=\"line-height: 1.15; margin-left: 20px;\"><em>&quot;Сред пациентите ми с мигрена, едно от най-важните неща при избора на метод за лечение е колко бързо започва да действа лекарството.&quot; - споделя д-р Kathleen Mullin от New England Institute of Neurology and Headache Стамфорд, Кънектикът в публикация от Pfizer.</em></p></blockquote><blockquote><p style=\"line-height: 1.15; margin-left: 20px;\"><em>&quot;Като назален спрей с бърза абсорбция, Zavzpret<sup>&nbsp;&reg;</sup> предлага алтернативна опция за лечение при пациенти, които имат нужда от облекчение на болката и не могат да приемат лекарства през устата поради гадене или повръщане. Така те могат бързо да се върнат към нормалното функциониране&quot;, добавя д-р Mullin.</em></p></blockquote><p style=\"line-height: 1.15;\"><em>Zavegepant</em><em>&nbsp;</em>е бил добре толериран от пациентите, участващи в клиничните проучвания. Не са докладвани сериозни странични ефекти от приложението му.</p><p style=\"line-height: 1.15;\">Най-честите странични ефекти, които се наблюдават с по-голяма честота при около 2% от пациентите, лекувани с трета генерация <em>CGRP</em> рецепторен антагонист, спрямо при пациенти, лекувани с плацебо, са нарушения на вкуса, гадене, дискомфорт в носа и повръщане.</p><p style=\"line-height: 1.15;\"><em>Zavegepant</em> е контраиндикиран при пациенти, които имат анамнестични данни за свръхчувствителност към <em>zavegepant</em> или към някой от другите компоненти в лекарството. Наблюдаваните реакции на свръхчувствителност по време на клиничните изпитвания на <em>zavegepant</em> включват подуване на лицето и уртикария.</p><p style=\"line-height: 1.15;\">Назалният спрей се очаква да бъде наличен на пазара от юли 2023г.</p><p style=\"line-height: 1.15;\">Източник: FDA Approves Zavegepant Nasal Spray for Acute Migraine - Medscape - Mar 14, 2023.</p>\r\n",
                            CreatedOn = new DateTime(2023, 6, 13, 19, 11, 25, 498, DateTimeKind.Utc).AddTicks(879),
                            CreatorId = "ff3d52a7-7288-42aa-9955-6c4c4ad4caed",
                            IsDeleted = false,
                            SourceUrl = "FDA Approves Zavegepant Nasal Spray for Acute Migraine - Medscape - Mar 14, 2023.",
                            Title = "FDA одобри назалния спрей Zavegepant за лечение на мигренозен пристъп"
                        });
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.ClinicalTrial", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgreementDocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hospital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ClinicalTrials");

                    b.HasData(
                        new
                        {
                            Id = "dummy-data-clinicaltrial-1",
                            AgreementDocumentName = "ClinicalTrialInformation.pdf",
                            City = "София",
                            CreatedOn = new DateTime(2023, 6, 15, 19, 11, 25, 497, DateTimeKind.Utc).AddTicks(8909),
                            CreatorId = "88f40769-cbdb-4c19-80b3-e43ccf48e22d",
                            Heading = "Evaluation of Peripheral Nerve Stimulation for Acute Treatment of Migraine Pain",
                            Hospital = "МБАЛНП \"Св. Наум\" ЕАД",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Headache", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Aura")
                        .HasColumnType("bit");

                    b.Property<string>("AuraDescriptionNotes")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int>("DurationHours")
                        .HasColumnType("int");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocalizationSide")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("Nausea")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Onset")
                        .HasColumnType("datetime2");

                    b.Property<string>("PainCharacteristics")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Phonophoby")
                        .HasColumnType("bit");

                    b.Property<bool>("Photophoby")
                        .HasColumnType("bit");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.Property<string>("Triggers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Vomiting")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Headaches");

                    b.HasData(
                        new
                        {
                            Id = "dummy-data-headache-1",
                            Aura = false,
                            DurationDays = 0,
                            DurationHours = 2,
                            DurationMinutes = 13,
                            EndTime = new DateTime(2023, 6, 13, 21, 24, 25, 496, DateTimeKind.Utc).AddTicks(5912),
                            LocalizationSide = "left side",
                            Nausea = true,
                            Onset = new DateTime(2023, 6, 13, 19, 11, 25, 496, DateTimeKind.Utc).AddTicks(5738),
                            PainCharacteristics = "pulsating",
                            PatientId = "6372cb29-7b06-4510-845a-375fe51edc06",
                            Phonophoby = false,
                            Photophoby = true,
                            Severity = 9,
                            Triggers = "none",
                            Vomiting = true
                        },
                        new
                        {
                            Id = "dummy-data-headache-2",
                            Aura = true,
                            AuraDescriptionNotes = "Flashing lights",
                            DurationDays = 0,
                            DurationHours = 6,
                            DurationMinutes = 10,
                            EndTime = new DateTime(2023, 6, 14, 1, 21, 25, 496, DateTimeKind.Utc).AddTicks(8073),
                            LocalizationSide = "right side",
                            Nausea = true,
                            Onset = new DateTime(2023, 6, 13, 19, 21, 25, 496, DateTimeKind.Utc).AddTicks(8072),
                            PainCharacteristics = "pulsating",
                            PatientId = "6372cb29-7b06-4510-845a-375fe51edc06",
                            Phonophoby = true,
                            Photophoby = true,
                            Severity = 9,
                            Triggers = "Alcohol usage",
                            Vomiting = false
                        });
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.HIT6Scale", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FifthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FirstQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FourthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SixthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ThirdQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("HIT6Scales");

                    b.HasData(
                        new
                        {
                            Id = "dummy-data-hit6scale-1",
                            CreatedOn = new DateTime(2023, 6, 13, 21, 11, 25, 496, DateTimeKind.Utc).AddTicks(9207),
                            FifthQuestionAnswer = "Always",
                            FirstQuestionAnswer = "Never",
                            FourthQuestionAnswer = "Very often",
                            IsDeleted = false,
                            PatientId = "6372cb29-7b06-4510-845a-375fe51edc06",
                            SecondQuestionAnswer = "Rarely",
                            SixthQuestionAnswer = "Always",
                            ThirdQuestionAnswer = "Sometimes",
                            TotalScore = 61
                        },
                        new
                        {
                            Id = "dummy-data-hit6scale-2",
                            CreatedOn = new DateTime(2023, 6, 13, 22, 11, 25, 497, DateTimeKind.Utc).AddTicks(757),
                            FifthQuestionAnswer = "Never",
                            FirstQuestionAnswer = "Never",
                            FourthQuestionAnswer = "Never",
                            IsDeleted = false,
                            PatientId = "6372cb29-7b06-4510-845a-375fe51edc06",
                            SecondQuestionAnswer = "Never",
                            SixthQuestionAnswer = "Never",
                            ThirdQuestionAnswer = "Never",
                            TotalScore = 96
                        });
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Medication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GenericName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HeadacheId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NumberOfTakenPills")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SinglePillDosage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("HeadacheId");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = "dummy-data-medication-1",
                            CreatedOn = new DateTime(2023, 6, 13, 19, 11, 25, 496, DateTimeKind.Utc).AddTicks(2668),
                            GenericName = "Dummy-Generic-Name-1",
                            HeadacheId = "dummy-data-headache-1",
                            IsDeleted = false,
                            Name = "Dummy-Data-Medication-1",
                            NumberOfTakenPills = 1m,
                            SinglePillDosage = 200m,
                            Units = "mg"
                        },
                        new
                        {
                            Id = "dummy-data-medication-2",
                            CreatedOn = new DateTime(2023, 6, 13, 19, 12, 25, 496, DateTimeKind.Utc).AddTicks(4306),
                            GenericName = "Dummy-Generic-Name-2",
                            HeadacheId = "dummy-data-headache-1",
                            IsDeleted = false,
                            Name = "Dummy-Data-Medication-2",
                            NumberOfTakenPills = 1m,
                            SinglePillDosage = 500m,
                            Units = "mg"
                        },
                        new
                        {
                            Id = "dummy-data-medication-3",
                            CreatedOn = new DateTime(2023, 6, 13, 19, 13, 25, 496, DateTimeKind.Utc).AddTicks(4386),
                            DeletedOn = new DateTime(2023, 6, 13, 19, 16, 25, 496, DateTimeKind.Utc).AddTicks(4389),
                            GenericName = "Dummy-Generic-Name-3",
                            HeadacheId = "dummy-data-headache-1",
                            IsDeleted = true,
                            Name = "Dummy-Data-Medication-3",
                            NumberOfTakenPills = 1m,
                            SinglePillDosage = 500m,
                            Units = "mg"
                        },
                        new
                        {
                            Id = "dummy-data-medication-4",
                            CreatedOn = new DateTime(2023, 6, 13, 19, 22, 25, 496, DateTimeKind.Utc).AddTicks(4446),
                            GenericName = "Dummy-Generic-Name-4",
                            HeadacheId = "dummy-data-headache-2",
                            IsDeleted = false,
                            Name = "Dummy-Data-Medication-4",
                            NumberOfTakenPills = 1m,
                            SinglePillDosage = 200m,
                            Units = "mg"
                        },
                        new
                        {
                            Id = "dummy-data-medication-5",
                            CreatedOn = new DateTime(2023, 6, 13, 19, 23, 25, 496, DateTimeKind.Utc).AddTicks(4449),
                            GenericName = "Dummy-Generic-Name-5",
                            HeadacheId = "dummy-data-headache-2",
                            IsDeleted = false,
                            Name = "Dummy-Data-Medication-5",
                            NumberOfTakenPills = 1m,
                            SinglePillDosage = 500m,
                            Units = "mg"
                        },
                        new
                        {
                            Id = "dummy-data-medication-6",
                            CreatedOn = new DateTime(2023, 6, 13, 19, 24, 25, 496, DateTimeKind.Utc).AddTicks(4458),
                            DeletedOn = new DateTime(2023, 6, 13, 19, 27, 25, 496, DateTimeKind.Utc).AddTicks(4460),
                            GenericName = "Dummy-Generic-Name-6",
                            HeadacheId = "dummy-data-headache-2",
                            IsDeleted = true,
                            Name = "Dummy-Data-Medication-6",
                            NumberOfTakenPills = 1m,
                            SinglePillDosage = 500m,
                            Units = "mg"
                        });
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Practicioner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClinicalTrialId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScienceDegree")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicalTrialId");

                    b.ToTable("Practicioners");

                    b.HasData(
                        new
                        {
                            Id = "dummy-data-practicioner-1",
                            ClinicalTrialId = "dummy-data-clinicaltrial-1",
                            CreatedOn = new DateTime(2023, 6, 15, 19, 11, 25, 497, DateTimeKind.Utc).AddTicks(6513),
                            FirstName = "Десислава",
                            IsDeleted = false,
                            Lastname = "Богданова",
                            Rank = "docent",
                            ScienceDegree = "д.м."
                        },
                        new
                        {
                            Id = "dummy-data-practicioner-2",
                            ClinicalTrialId = "dummy-data-clinicaltrial-1",
                            CreatedOn = new DateTime(2023, 6, 15, 19, 11, 25, 497, DateTimeKind.Utc).AddTicks(7702),
                            FirstName = "Васил",
                            IsDeleted = false,
                            Lastname = "Тодоров",
                            Rank = "doctor",
                            ScienceDegree = "д.м."
                        });
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.ZungScaleForAnxiety", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EighteenthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EighthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EleventhQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FifteenthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FifthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FourteenthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FourthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NineteenthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NinthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SeventeenthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SeventhQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SixteenthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SixthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TenthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ThirdQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ThirteenthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.Property<string>("TwelfthQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TwentiethQuestionAnswer")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("ZungScalesForAnxiety");

                    b.HasData(
                        new
                        {
                            Id = "dummy-data-zungscaleforanxiety-1",
                            CreatedOn = new DateTime(2023, 6, 13, 22, 11, 25, 497, DateTimeKind.Utc).AddTicks(2194),
                            EighteenthQuestionAnswer = "Sometimes",
                            EighthQuestionAnswer = "Sometimes",
                            EleventhQuestionAnswer = "Sometimes",
                            FifteenthQuestionAnswer = "Sometimes",
                            FifthQuestionAnswer = "Sometimes",
                            FirstQuestionAnswer = "Sometimes",
                            FourteenthQuestionAnswer = "Sometimes",
                            FourthQuestionAnswer = "Sometimes",
                            IsDeleted = false,
                            NineteenthQuestionAnswer = "Sometimes",
                            NinthQuestionAnswer = "Sometimes",
                            PatientId = "6372cb29-7b06-4510-845a-375fe51edc06",
                            SecondQuestionAnswer = "Sometimes",
                            SeventeenthQuestionAnswer = "Sometimes",
                            SeventhQuestionAnswer = "Sometimes",
                            SixteenthQuestionAnswer = "Sometimes",
                            SixthQuestionAnswer = "Sometimes",
                            TenthQuestionAnswer = "Sometimes",
                            ThirdQuestionAnswer = "Sometimes",
                            ThirteenthQuestionAnswer = "Sometimes",
                            TotalScore = 40,
                            TwelfthQuestionAnswer = "Sometimes",
                            TwentiethQuestionAnswer = "Sometimes"
                        },
                        new
                        {
                            Id = "dummy-data-zungscaleforanxiety-2",
                            CreatedOn = new DateTime(2023, 6, 13, 22, 11, 25, 497, DateTimeKind.Utc).AddTicks(5592),
                            EighteenthQuestionAnswer = "Never or rarely",
                            EighthQuestionAnswer = "Never or rarely",
                            EleventhQuestionAnswer = "Never or rarely",
                            FifteenthQuestionAnswer = "Never or rarely",
                            FifthQuestionAnswer = "Never or rarely",
                            FirstQuestionAnswer = "Never or rarely",
                            FourteenthQuestionAnswer = "Never or rarely",
                            FourthQuestionAnswer = "Never or rarely",
                            IsDeleted = false,
                            NineteenthQuestionAnswer = "Never or rarely",
                            NinthQuestionAnswer = "Never or rarely",
                            PatientId = "6372cb29-7b06-4510-845a-375fe51edc06",
                            SecondQuestionAnswer = "Never or rarely",
                            SeventeenthQuestionAnswer = "Never or rarely",
                            SeventhQuestionAnswer = "Never or rarely",
                            SixteenthQuestionAnswer = "Never or rarely",
                            SixthQuestionAnswer = "Never or rarely",
                            TenthQuestionAnswer = "Never or rarely",
                            ThirdQuestionAnswer = "Never or rarely",
                            ThirteenthQuestionAnswer = "Never or rarely",
                            TotalScore = 20,
                            TwelfthQuestionAnswer = "Never or rarely",
                            TwentiethQuestionAnswer = "Never or rarely"
                        });
                });

            modelBuilder.Entity("ApplicationUserHeadache", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("SharedWithId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraineDiary.Data.DbModels.Headache", null)
                        .WithMany()
                        .HasForeignKey("SharedWithMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserHIT6Scale", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.HIT6Scale", null)
                        .WithMany()
                        .HasForeignKey("SharedHIT6ScalesWithMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("SharedWithId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserZungScaleForAnxiety", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("SharedWithId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraineDiary.Data.DbModels.ZungScaleForAnxiety", null)
                        .WithMany()
                        .HasForeignKey("SharedZungScalesForAnxietyWithMeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Article", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", "Creator")
                        .WithMany("Articles")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.ClinicalTrial", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", "Creator")
                        .WithMany("ClinicalTrials")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Headache", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", "Patient")
                        .WithMany("Headaches")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.HIT6Scale", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", "Patient")
                        .WithMany("HIT6Scales")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Medication", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.Headache", "Headache")
                        .WithMany("MedicationsTaken")
                        .HasForeignKey("HeadacheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Headache");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Practicioner", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ClinicalTrial", "ClinicalTrial")
                        .WithMany("Practicioners")
                        .HasForeignKey("ClinicalTrialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicalTrial");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.ZungScaleForAnxiety", b =>
                {
                    b.HasOne("MigraineDiary.Data.DbModels.ApplicationUser", "Patient")
                        .WithMany("ZungScalesForAnxiety")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.ApplicationUser", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("ClinicalTrials");

                    b.Navigation("HIT6Scales");

                    b.Navigation("Headaches");

                    b.Navigation("ZungScalesForAnxiety");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.ClinicalTrial", b =>
                {
                    b.Navigation("Practicioners");
                });

            modelBuilder.Entity("MigraineDiary.Data.DbModels.Headache", b =>
                {
                    b.Navigation("MedicationsTaken");
                });
#pragma warning restore 612, 618
        }
    }
}
